(self.webpackChunkrlayers=self.webpackChunkrlayers||[]).push([[5602],{35602:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>n});const n="import React, {useCallback, useMemo} from 'react';\r\nimport {fromLonLat} from 'ol/proj';\r\nimport Feature from 'ol/Feature';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport 'ol/ol.css';\r\n\r\nimport {RMap, RLayerVector, RStyle, RFeature, ROverlay, RLayerStamen} from 'rlayers';\r\n\r\n// These are the French internal administrative borders in GeoJSON format\r\nconst departements =\r\n    'https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/departements.geojson';\r\nconst parser = new GeoJSON({featureProjection: 'EPSG:3857'});\r\n// Population by French administrative division\r\n// https://public.opendatasoft.com/explore/dataset/population-francaise-par-departement-2018/\r\n// Published under Etalab Open License https://www.etalab.gouv.fr/wp-content/uploads/2018/11/open-licence.pdf\r\nconst inputData =\r\n    'https://public.opendatasoft.com/api/records/1.0/search/?dataset=population-francaise-par-departement-2018&q=&rows=200';\r\ntype inputDataType = {records: {fields: {code_departement: string; population: number}}[]};\r\nconst fetchData = fetch(inputData).then((raw) => raw.json() as Promise<inputDataType>);\r\nconst getData = (data: inputDataType, dep: string) =>\r\n    data.records.find((el) => el.fields.code_departement === dep)?.fields.population ?? 0;\r\n// The default hitbox around the features is 3px wide making narrow gaps between the borders difficult to select\r\nRFeature.hitTolerance = 0;\r\n\r\nexport default function GeoData(): JSX.Element {\r\n    const [data, setData] = React.useState({records: []} as inputDataType);\r\n    const [current, setCurrent] = React.useState(null as Feature);\r\n    React.useEffect(() => fetchData.then((r) => setData(r)) as null, []);\r\n    return (\r\n        <div className='d-flex flex-row'>\r\n            <RMap\r\n                className='example-map'\r\n                center={useMemo(() => fromLonLat([2, 46.5]), [])}\r\n                zoom={5.75}\r\n                noDefaultControls={true}\r\n                noDefaultInteractions={true}\r\n            >\r\n                <RLayerStamen layer='toner' />\r\n\r\n                {/* This the internal borders layer, initialized with the GeoJSON\r\n                 * useCallback is a performance optimization, it allows to always have\r\n                 * the same function object unless 'current' changes\r\n                 * without it you will create a new function at every frame rendered */}\r\n                <RLayerVector\r\n                    zIndex={5}\r\n                    format={parser}\r\n                    url={departements}\r\n                    onPointerEnter={useCallback((e) => setCurrent(e.target), [])}\r\n                    onPointerLeave={useCallback((e) => current === e.target && setCurrent(null), [\r\n                        current\r\n                    ])}\r\n                >\r\n                    {/* When styling each feature, compute the color from the population data\r\n                     * The function is memoized and it is replaced only once - when the population data\r\n                     * becomes available. Without memoization (useCallback) all the features will need to\r\n                     * be re-evaluated at every frame */}\r\n                    <RStyle.RStyle\r\n                        render={useCallback(\r\n                            (f) => (\r\n                                <RStyle.RFill\r\n                                    color={`rgba(0, 0, ${\r\n                                        getData(data, f.get('code')) / 5000\r\n                                    }, 0.75)`}\r\n                                />\r\n                            ),\r\n                            [data]\r\n                        )}\r\n                    />\r\n                </RLayerVector>\r\n                {/* This is a layer with a single feature - current - that holds the highlighted borders\r\n                 * It is styled with the default OpenLayers style */}\r\n                <RLayerVector zIndex={10}>\r\n                    {current ? (\r\n                        <div>\r\n                            <RFeature geometry={current.getGeometry()}>\r\n                                <ROverlay className='example-overlay' autoPosition={true}>\r\n                                    Population in <strong>{current.get('nom')}</strong> in 2018 is{' '}\r\n                                    <strong>{getData(data, current.get('code'))}</strong>\r\n                                </ROverlay>\r\n                            </RFeature>\r\n                        </div>\r\n                    ) : null}\r\n                </RLayerVector>\r\n            </RMap>\r\n        </div>\r\n    );\r\n}\r\n"}}]);