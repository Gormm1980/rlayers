(self.webpackChunkrlayers=self.webpackChunkrlayers||[]).push([[5574],{35574:(r,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t="import React from 'react';\r\nimport {fromLonLat, toLonLat} from 'ol/proj';\r\nimport {boundingExtent} from 'ol/extent';\r\nimport {DragBoxEvent} from 'ol/interaction/DragBox';\r\nimport {Point} from 'ol/geom';\r\nimport {Feature} from 'ol';\r\nimport {Coordinate} from 'ol/coordinate';\r\nimport {shiftKeyOnly} from 'ol/events/condition';\r\nimport 'ol/ol.css';\r\n\r\nimport monument from './svg/monument.svg';\r\nimport {RMap, ROSM, RInteraction, RLayerVector, RStyle, RFeature} from 'rlayers';\r\n\r\nexport const coords: Record<string, Coordinate> = {\r\n    'Arc de Triomphe': [2.295, 48.8737],\r\n    \"Place d'Italie\": [2.355, 48.831],\r\n    Bastille: [2.369, 48.853],\r\n    'Tour Eiffel': [2.294, 48.858],\r\n    Montmartre: [2.342, 48.887]\r\n};\r\nconst coordsToString = (coords) => `${coords[1].toFixed(3)}:${coords[0].toFixed(3)}`;\r\n\r\nexport default function Interactions(): JSX.Element {\r\n    const [startDragBox, setStartDragBox] = React.useState(null as Coordinate);\r\n    const [endDragBox, setEndDragBox] = React.useState(null as Coordinate);\r\n    const [msg, setMsg] = React.useState(\r\n        '<p>Hold shift to select an area or drag and drop the monuments</p>'\r\n    );\r\n    // The features must be part of the state as they will be subject to change\r\n    const [features] = React.useState(() =>\r\n        Object.keys(coords).map(\r\n            (f) =>\r\n                new Feature({\r\n                    geometry: new Point(fromLonLat(coords[f])),\r\n                    name: f\r\n                })\r\n        )\r\n    );\r\n    const vectorRef = React.useRef() as React.RefObject<RLayerVector>;\r\n    return (\r\n        <React.Fragment>\r\n            <RMap className='example-map' center={fromLonLat([2.364, 48.82])} zoom={11}>\r\n                <ROSM />\r\n\r\n                <RLayerVector ref={vectorRef}>\r\n                    <RStyle.RStyle>\r\n                        <RStyle.RIcon src={monument} />\r\n                    </RStyle.RStyle>\r\n                    {features.map((f, i) => (\r\n                        <RFeature key={i} feature={f} />\r\n                    ))}\r\n                </RLayerVector>\r\n\r\n                <RInteraction.RDragBox\r\n                    condition={shiftKeyOnly}\r\n                    onBoxStart={React.useCallback((e: DragBoxEvent) => {\r\n                        setStartDragBox(e.coordinate);\r\n                        setEndDragBox(null);\r\n                    }, [])}\r\n                    onBoxEnd={React.useCallback(\r\n                        (e: DragBoxEvent) => {\r\n                            setEndDragBox(e.coordinate);\r\n                            const selected = [];\r\n                            vectorRef.current.source.forEachFeatureInExtent(\r\n                                boundingExtent([startDragBox, e.coordinate]),\r\n                                (f) => selected.push(f.get('name')) && false\r\n                            );\r\n                            setMsg(\r\n                                `You selected <strong>${\r\n                                    selected.join(', ') || 'no monuments'\r\n                                }</strong>`\r\n                            );\r\n                        },\r\n                        [startDragBox, vectorRef]\r\n                    )}\r\n                />\r\n\r\n                <RInteraction.RTranslate\r\n                    onTranslateEnd={React.useCallback((e) => {\r\n                        const f = e.features.item(0);\r\n                        const coords = toLonLat((f.getGeometry() as Point).getFirstCoordinate());\r\n                        setMsg(\r\n                            `You placed <strong>${f.get('name')}</strong> at ${coordsToString(\r\n                                coords\r\n                            )}`\r\n                        );\r\n                    }, [])}\r\n                />\r\n            </RMap>\r\n            <div\r\n                className='mx-0 mt-0 mb-3 p-1 w-100 jumbotron shadow shadow'\r\n                dangerouslySetInnerHTML={{__html: msg}}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n"}}]);