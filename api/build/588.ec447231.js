"use strict";(self.webpackChunkrlayers=self.webpackChunkrlayers||[]).push([[588],{67737:(e,t,r)=>{function decodeRowAcc(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function decodeRowFloatingPoint(e,t,r){let n=0,a=e.length;const o=a/r;for(;a>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;a-=t}const i=e.slice();for(let t=0;t<o;++t)for(let n=0;n<r;++n)e[r*t+n]=i[(r-n-1)*o+t]}function applyPredictor(e,t,r,n,a,o){if(!t||1===t)return e;for(let e=0;e<a.length;++e){if(a[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(a[e]!==a[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const i=a[0]/8,c=2===o?1:a.length;for(let o=0;o<n&&!(o*c*r*i>=e.byteLength);++o){let n;if(2===t){switch(a[0]){case 8:n=new Uint8Array(e,o*c*r*i,c*r*i);break;case 16:n=new Uint16Array(e,o*c*r*i,c*r*i/2);break;case 32:n=new Uint32Array(e,o*c*r*i,c*r*i/4);break;default:throw new Error(`Predictor 2 not allowed with ${a[0]} bits per sample.`)}decodeRowAcc(n,c)}else 3===t&&(n=new Uint8Array(e,o*c*r*i,c*r*i),decodeRowFloatingPoint(n,c,i))}return e}r.d(t,{Z:()=>n});class n{async decode(e,t){const r=await this.decodeBlock(t),n=e.Predictor||1;if(1!==n){const t=!e.StripOffsets;return applyPredictor(r,n,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}},51588:(e,t,r)=>{r.r(t),r.d(t,{default:()=>a});var n=r(67737);class a extends n.Z{constructor(){if(super(),"undefined"==typeof createImageBitmap)throw new Error("Cannot decode WebImage as `createImageBitmap` is not available");if("undefined"==typeof document&&"undefined"==typeof OffscreenCanvas)throw new Error("Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available")}async decode(e,t){const r=new Blob([t]),n=await createImageBitmap(r);let a;"undefined"!=typeof document?(a=document.createElement("canvas"),a.width=n.width,a.height=n.height):a=new OffscreenCanvas(n.width,n.height);const o=a.getContext("2d");return o.drawImage(n,0,0),o.getImageData(0,0,n.width,n.height).data.buffer}}}}]);