"use strict";(self.webpackChunkrlayers=self.webpackChunkrlayers||[]).push([[321],{67737:(e,t,r)=>{function decodeRowAcc(e,t){let r=e.length-t,o=0;do{for(let r=t;r>0;r--)e[o+t]+=e[o],o++;r-=t}while(r>0)}function decodeRowFloatingPoint(e,t,r){let o=0,n=e.length;const i=n/r;for(;n>t;){for(let r=t;r>0;--r)e[o+t]+=e[o],++o;n-=t}const l=e.slice();for(let t=0;t<i;++t)for(let o=0;o<r;++o)e[r*t+o]=l[(r-o-1)*i+t]}function applyPredictor(e,t,r,o,n,i){if(!t||1===t)return e;for(let e=0;e<n.length;++e){if(n[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(n[e]!==n[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const l=n[0]/8,c=2===i?1:n.length;for(let i=0;i<o&&!(i*c*r*l>=e.byteLength);++i){let o;if(2===t){switch(n[0]){case 8:o=new Uint8Array(e,i*c*r*l,c*r*l);break;case 16:o=new Uint16Array(e,i*c*r*l,c*r*l/2);break;case 32:o=new Uint32Array(e,i*c*r*l,c*r*l/4);break;default:throw new Error(`Predictor 2 not allowed with ${n[0]} bits per sample.`)}decodeRowAcc(o,c)}else 3===t&&(o=new Uint8Array(e,i*c*r*l,c*r*l),decodeRowFloatingPoint(o,c,l))}return e}r.d(t,{Z:()=>o});class o{async decode(e,t){const r=await this.decodeBlock(t),o=e.Predictor||1;if(1!==o){const t=!e.StripOffsets;return applyPredictor(r,o,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}},83321:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});var o=r(67737);class n extends o.Z{decodeBlock(e){return e}}}}]);